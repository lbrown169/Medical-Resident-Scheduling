// <auto-generated />
using System;
using MedicalDemo.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalDemo.Migrations
{
    [DbContext(typeof(MedicalContext))]
    [Migration("20250930015441_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MedicalDemo.Data.Models.Admins", b =>
                {
                    b.Property<string>("admin_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("admin_id");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("phone_num")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_num");

                    b.HasKey("admin_id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Announcements", b =>
                {
                    b.Property<byte[]>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("announcement_id");

                    b.Property<string>("AuthorId")
                        .HasColumnType("longtext")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("message");

                    b.HasKey("AnnouncementId");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Blackouts", b =>
                {
                    b.Property<byte[]>("BlackoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("blackout_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("ResidentId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("resident_id");

                    b.HasKey("BlackoutId");

                    b.ToTable("blackouts");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Dates", b =>
                {
                    b.Property<byte[]>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("date_id");

                    b.Property<string>("CallType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("call_type");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("ResidentId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("resident_id");

                    b.Property<byte[]>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("schedule_id");

                    b.HasKey("DateId");

                    b.HasIndex("ResidentId");

                    b.ToTable("dates");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Invitation", b =>
                {
                    b.Property<string>("token")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<DateTime>("expires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires");

                    b.Property<string>("resident_id")
                        .HasColumnType("longtext")
                        .HasColumnName("resident_id");

                    b.Property<bool>("used")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("used");

                    b.HasKey("token");

                    b.ToTable("invitations");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Residents", b =>
                {
                    b.Property<string>("resident_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("resident_id");

                    b.Property<int>("bi_yearly_hours")
                        .HasColumnType("int")
                        .HasColumnName("bi_yearly_hours");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<int>("graduate_yr")
                        .HasColumnType("int")
                        .HasColumnName("graduate_yr");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("phone_num")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_num");

                    b.Property<int>("total_hours")
                        .HasColumnType("int")
                        .HasColumnName("total_hours");

                    b.Property<int>("weekly_hours")
                        .HasColumnType("int")
                        .HasColumnName("weekly_hours");

                    b.HasKey("resident_id");

                    b.ToTable("residents");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Rotations", b =>
                {
                    b.Property<byte[]>("RotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("rotation_id");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("month");

                    b.Property<string>("ResidentId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("resident_id");

                    b.Property<string>("Rotation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rotation");

                    b.HasKey("RotationId");

                    b.ToTable("rotations");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Schedules", b =>
                {
                    b.Property<byte[]>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("ScheduleId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.SwapRequest", b =>
                {
                    b.Property<byte[]>("SwapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("idswap_requests");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Details")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("details");

                    b.Property<DateTime>("RequesteeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requestee_date");

                    b.Property<string>("RequesteeId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("requestee_id");

                    b.Property<DateTime>("RequesterDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requester_date");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("requester_id");

                    b.Property<byte[]>("ScheduleSwapId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("schedule_swap_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("SwapId");

                    b.ToTable("swap_requests");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Vacations", b =>
                {
                    b.Property<byte[]>("VacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("vacation_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("details");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("groupId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("reason");

                    b.Property<string>("ResidentId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("resident_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("VacationId");

                    b.ToTable("vacations");
                });

            modelBuilder.Entity("MedicalDemo.Data.Models.Dates", b =>
                {
                    b.HasOne("MedicalDemo.Data.Models.Residents", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");
                });
#pragma warning restore 612, 618
        }
    }
}
